apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}

repositories {
    mavenCentral()
}
dependencies {
    compile group: 'org.apache.poi', name: 'poi', version: '3.11'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.11'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.7'
    compile fileTree(dir: 'src/main/libs', include: '*.jar')
    testCompile 'org.jmockit:jmockit:1.12'
    testCompile 'junit:junit:4.11', {
        transitive = false
    }
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.dbunit:dbunit:2.5.1'
    testCompile 'org.slf4j:slf4j-api:1.7.12'
    testCompile 'org.slf4j:slf4j-nop:1.7.12'
}


// アプリケーション設定
def appName = 'DBpoipoi'
startScripts {
    applicationName = appName
}
mainClassName = "jp.gr.java_conf.ktnet.dbpoipoi.DBpoipoi"
distZip.baseName = appName
jar.baseName = appName

// 文字コード設定
def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava, javadoc]*.options*.encoding = defaultEncoding


// Gradleラッパーのインストールタスク
task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

test {
    // テストが二重実行される問題の対策
    exclude '**/*$*'
}

// Findbugsの設定
[findbugsMain, findbugsTest]*.effort = "max"
[findbugsMain, findbugsTest]*.reportLevel = "high"
[findbugsMain, findbugsTest]*.ignoreFailures = true
[findbugsMain, findbugsTest]*.reports {
    xml.enabled = true
    html.enabled = false
}

// Checkstyleの設定
// プロダクションコード用
checkstyleMain {
    configFile = file('config/checkstyle/checkstyle.xml')
    ignoreFailures = true
}
// テストコード用
checkstyleTest {
    configFile = file('config/checkstyle/checkstyle-test.xml')
    ignoreFailures = true
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// 生成するEclipseプロジェクトにフォーマッターの設定追加
eclipse.jdt.file {
    withProperties { properties ->
        def formatter = new XmlSlurper().parse('config/EclipseFormatter.xml')
        formatter.profile.setting.each {
            properties.put(it.@id as String, it.@value as String)
        }
    }
}

// 生成するEclipseプロジェクトの文字コードを設定
eclipseJdt << {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding/<project>=' + defaultEncoding)
}

defaultTasks 'clean', 'javadoc', 'build', 'jacocoTestReport', 'distZip'
